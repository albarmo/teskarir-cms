// [WARNING] This file is generated by running `$ qore codegen` on your root project, please do not edit

/// <reference types="@feedloop/qore-client" />
import { QoreSchema } from "@feedloop/qore-client";

declare module "@feedloop/qore-client" {
  type StatementsTableRow = {
    id: string;
    name: string;
    type: "PG" | "R" | "TF";
    answers: json;
    statementsGroup1: { nodes: StatementsGroup1TableRow[] };
  };

  type MemberTableRow = {
    id: string;
    role: { id: string; displayField: string };
    email: string;
    username: string;
    password: string;
    birthDate: Date;
    domicile: string;
    status: boolean;
  };

  type OutputsTableRow = {
    id: string;
    name: string;
    description: string;
    typeTest: TypeTestTableRow;
    outputTest1: { nodes: OutputTest1TableRow[] };
  };

  type ProductsTableRow = {
    id: string;
    name: string;
    description: string;
    majors: string;
    test: { nodes: TestTableRow[] };
  };

  type TypesTableRow = {
    id: string;
    name: string;
    description: string;
    outputs: { nodes: OutputsTableRow[] };
    test1: { nodes: Test1TableRow[] };
  };

  type TestTableRow = {
    id: string;
    name: string;
    description: string;
    productId: { nodes: ProductIdTableRow[] };
    testType: TestTypeTableRow;
    type: string;
    outputTest: { nodes: OutputTestTableRow[] };
    statementsGroup: { nodes: StatementsGroupTableRow[] };
  };

  type OutputTestTableRow = {
    id: string;
    name: string;
    testId: TestIdTableRow;
    result: number;
    outputId: OutputIdTableRow;
  };

  type StatementsGroupTableRow = {
    id: string;
    name: string;
    testId: TestIdTableRow;
    statementId: StatementIdTableRow;
  };

  type AllMemberViewRow = {
    read: {
      id: string;
      email: string;
      role: { id: string; displayField: string };
      username: string;
      password: string;
      birthDate: Date;
      domicile: string;
      status: boolean;
    };
    write: {
      email: string;
      username: string;
      password: string;
      birthDate: Date;
      domicile: string;
      status: boolean;
    };
    params: {};
    actions: {};
    forms: {
      register: {
        role?: string;
        email: string;
        username: string;
        password: string;
        birthDate?: Date;
        domicile?: string;
        status?: boolean;
      };
    };
  };

  type AllProductsViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
      majors: string;
    };
    write: {
      name: string;
      description: string;
      majors: string;
    };
    params: {};
    actions: {};
    forms: {
      addProduct: {
        name: string;
        description?: string;
        majors?: string;
      };
    };
  };

  type AllOutputsViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
      typeTest: TypeTestTableRow;
    };
    write: {
      name: string;
      description: string;
      typeTest: string[];
    };
    params: {};
    actions: {};
    forms: {};
  };

  type AuthDataViewRow = {
    read: {
      id: string;
      email: string;
      username: string;
      password: string;
      birthDate: Date;
    };
    write: {
      email: string;
      username: string;
      password: string;
      birthDate: Date;
    };
    params: {};
    actions: {};
    forms: {
      register: {
        role?: string;
        email: string;
        username: string;
        password: string;
        birthDate?: Date;
        domicile?: string;
        status?: boolean;
      };
    };
  };

  type AllTypesViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
    };
    write: {
      name: string;
      description: string;
    };
    params: {};
    actions: {};
    forms: {};
  };

  type AllStatementsViewRow = {
    read: {
      id: string;
      name: string;
      type: "PG" | "R" | "TF";
      answers: json;
    };
    write: {
      name: string;
      type: "PG" | "R" | "TF";
    };
    params: {};
    actions: {};
    forms: {};
  };

  type AllTestViewRow = {
    read: {
      id: string;
      name: string;
      description: string;
      productId: { nodes: ProductIdTableRow[] };
      testType: TestTypeTableRow;
      type: string;
    };
    write: {
      name: string;
      description: string;
      productId: string[];
      testType: string[];
      type: string;
    };
    params: {};
    actions: {};
    forms: {};
  };

  type AllOutputTestViewRow = {
    read: {
      id: string;
      name: string;
      testId: TestIdTableRow;
      result: number;
      outputId: OutputIdTableRow;
    };
    write: {
      name: string;
      testId: string[];
      result: number;
      outputId: string[];
    };
    params: {};
    actions: {};
    forms: {};
  };

  type AllStatementsGroupViewRow = {
    read: {
      id: string;
      name: string;
      testId: TestIdTableRow;
      statementId: StatementIdTableRow;
    };
    write: {
      name: string;
      testId: string[];
      statementId: string[];
    };
    params: {};
    actions: {};
    forms: {
      addStatementGroup: {
        name?: string;
        testId?: string[];
        statementId?: string[];
      };
    };
  };

  type ProjectSchema = {
    allMember: AllMemberViewRow;
    allProducts: AllProductsViewRow;
    allOutputs: AllOutputsViewRow;
    authData: AuthDataViewRow;
    allTypes: AllTypesViewRow;
    allStatements: AllStatementsViewRow;
    allTest: AllTestViewRow;
    allOutputTest: AllOutputTestViewRow;
    allStatementsGroup: AllStatementsGroupViewRow;
  };
}
